package j09_innerClass;

// 익명 클래스

//=> 이름이 없는 클래스이며, 한번만 사용하고 버려지는 객체를
//사용 할 때 유용하게 쓰이는 내부클래스로서,
//다른 클래스를 상속 받는 경우 또는 인터페이스를 구현 하는 경우 이용됨

interface Flyer {
	void fly(); //추상매서드
} // 1. 인터페이스 사용 일반적인 방법 : 용도가 많을 때, 많이 쓰일 때 구현클래스 작성해놓고 사용

class Flyer1 implements Flyer {
	@Override
	public void fly() {
		System.out.println("* 1. 일반적인 방법 : 구현클래스 직접 만들기(작성-다른 클래스에서 언제든 재사용 가능) *");
	} //fly 구현 매소드
} //Flyer1

public class Ex04_Anonymous_Fly {

	public static void main(String[] args) {
		// 1. 일반적인 방법(구현클래스로 생성)
		Flyer f1= new Flyer1();
		f1.fly();
		
//----------------------------------------------------------------------------------------------------------//
		
		// 2. 구현 클래스 이용안하고, 익명클래스를 사용해 바로 코딩하는 것
		// Flyer fi = new Flyer();(X) -> 인터페이스는 직접 생성(new) 될수 없고 implements 하는 클래스를 통해 생성 후 사용되어짐
		
	    // 익명클래스 : "★인터페이스의 구현 클래스를 new 다음에 직접 기술"
	    // => 그러므로 익명 클래스는 추상클래스를 상속받거나, 인터페이스를 구현하는 형태만 가능하며,
	    //    1) 강제성을 부여한 2) 일회성 코드에 주로 이용 (ex: 이벤트 핸들러 또는 이벤트 리스너 구현)  
	    // => Anonymous 클래스에서는 인터페이스이름으로 new 하고 {..}; 블럭에서 구현
	    //    마지막에는 반드시;
	    // => 내부적으로 Flyer 를 구현한 익명의 클래스가 생성되며 이를 Anonymous 클래스 라함.   
		
		Flyer f2= new Flyer() { //오버라이딩 바로 해줘야
			@Override
			public void fly() {
				System.out.println("* 2. 익명 클래스: 직접 오버라이딩 매서드 작성*");
			}
		}; //익명클래스 종료 시 반드시 ; 붙이기
		f2.fly(); //익명클래스 방법으로 소환 가능
		
//----------------------------------------------------------------------------------------------------------//
		// 3. Object를 상속받는 익명클래스 만들기 (오브젝트(조상)= new 오브젝트(){오버라이딩 또는 필요한 매서드};)
		Object ob = new Object() {
			
			@Override //toString을 오버라이딩 해봄
			public String toString() {
				return "Object를 상속받는 익명클래스";
			}
			
			public void test () { //오버라이딩 외에 내가 만들고 싶은 매서드
				System.out.println("* 4. ObjectTest: test매서드로 테스트*"); //But, Object에 정의된 매서드가 아닌 내가 만든거기 때문에 쓸수X
			}
		};
		
		System.out.println("* 3. ObjectTest : *"+ob); //toString 출력
		/*ob.test();*/ // => 오버라이딩이 아닌 매서드는 작성 불가능하지 않지만, 조상의 인스턴스로는 실행 불가능하므로 작성 의미가 X

	} //main
} //class

//----------------------------------------------------------------------------------------------------------//
