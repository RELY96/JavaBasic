package j05_ClassMethod;

//** 객체생성과정 (클래스 클래스명 = new연산자 생성자 는 규칙!!!)

//=> new 연산자 : 해당되는 클래스를 메모리에 로드해서 생성하는 역할 -> 생성직후 생성자메서드를 호출
// Ex01_Car myCar = new(Ex01_Car 클래스를 램에 로드(myCar주소 만들기))
// Ex01_Car(램에 로드된 클래스를 생성 직후 자동 호출한다는 뜻 : 호출했으니 Ex01_Car로 작업해라)
// => Ex01_Car(); 는 자바에서 자동 호출해준 자동 메서드가 됨(컴파일 시 class안에 자동으로 넣어줌)

//** 생성자(Contructor) 메서드
//=> 클래스와 이름 동일하고, return 값이 없음(void 조차도 생략됨)(값을 리턴하면 myCar에 주소줘야 하는데 값을 주기 때문에 성립안됨)
//   -> 그러나 매개변수는 있음/갯수, Type 제한 없음 => 한 클래스의 생성자 여러개 만들수O (생성자 오버로딩 가능) 
//=> 생성시에 단 한번 호출가능(Car c1 = new Car(); 생성 시 호출되고 그 뒤 다시 호출X)
//=/= 일반 매서드는 언제든지 호출 가능

//=> 생성자를 작성하지 않으면 컴파일러가 자동으로 기본생성자를 만들어줌(Default Contructor)
//   (★하나라도 생성자 메서드를 작성하면 Default 생성자는 자동으로 만들어지지않음)


//** 생성자 메서드에서 생성자 메서드 호출 가능 
//=> this(?,?,...)
//=> this(...) 은 반드시 생성자 메서드 내에서 첫줄에 위치해야함.

class Car { // public은 접근 범위(public X-> 해당 클래스는 package 안에서만 쓸 수 있음)
	public int speed;
	public int mileage;
	public String color;
//	public static String color; // <- 인스턴스 변수, static하면 생성자 초기화 시 변화X할 수 있음
	
	//----------------------------------------------------------//

	// ★ 1) 기본 생성자 => 매개변수 없고, 생성자를 전혀 작성하지 않으면 자동제공(컴파일 시 bin폴더에 자동 추가)
	// 형식 > Car(){}
	// 생성자는 이름이 class와 똑같아야 하는 관계로, 생성자는 매서드(소문자여야함) 지만 대문자로 시작
	Car() { // 생성자 매서드 : main 실행시 ★얘가 먼저 찍힌 후 다른 매서드들 실행
		System.out.println("기본생성자호출");
	} //얘가 없으면 Car c1 = new Car();는 오류, 단, 얘도 없고 Car c1 = new Car(); 도 없으면 밑에 다른 생성자들 출력가능
	
	//=============================================================//
	
	// 2) 변수를 초기화하는 생성자 : 이런 생성자 매서드는 다른 인스턴스 안의 값을 한번에 ★다른값으로 초기화할때 사용
	// => this : 지역변수, 전역변수 구별
	           //현재클래스의 인스턴스
	
	// => this() == Car() 라는 뜻, 생성자 안에서 동일한 코드가 있으면, 중복으로 쓰지말고 반복적으로 호출가능하게 만듦 <- this(매개변수)와 Car(매개변수)가 동일한 생성자 매서드가 있어야 함
	//      - 즉, this()도 하나의 인스턴스임
	//      - 생성자메서드 안에서 생성자메서드 호출
	//      - 생성자의 반복적인 코드의 재사용성
	//      - ★생성자 메서드 내에서 반드시 첫줄에 위치해야함
	
//	Car(int speed) { //speed를 초기화하는 생성자
//		this.speed=speed; //this를 쓰면 speed초기화 가 지역변수로 머물지 않고 전역으로도 사용가능하게 됨
//		// this는 Car클래스(현재클래스)의 인스턴스를 의미함
//	}
//	
//	Car(int mileage) { //마일리지를 초기화하는 생성자, 변수 타입이 같아서 오버로딩 안되고 오류
//		this.milage=mileage;
//	}
	
	//=============================================================//
	
	// > 해결방안!
	Car(int speed, int mileage) {
		this(speed,mileage,null); //<-첫줄!
//		this.speed=speed;
//		this.mileage=mileage;
	}
	
	Car(String color) { //한꺼번에 세개 다 초기화도 가능
		this(0,0,color);  //<-첫줄!
//		this.color=color;
	}
	
	Car(int speed, int mileage, String color) { // ★위의 두개를 모두 포함해서 this()를 쓸 수 있게 해주는 생성자
		this.speed=speed;
		this.mileage=mileage;
		this.color=color;
//		Car.color=color;
		//this()를 활용해서 맴버변수 전체를 초기화 할때, 특정값만 원래 전역변수값으로 출력하고 싶은 경우? <-this(안 전역변수들)안에 해당 전역변수를 static으로 정의해야 함/ 단,this말고 Car.color로 하는게 바람직함
	}
	//이렇게 객체클래스 안에 생성자를 1개라도 만들어주면(2)처럼), 디폴트 생성자를 자동으로 만들어주지 않음
	// 2)번 유형의 생성자 등을 사용해야 할 때는, "꼭 디폴트 생성자를 인위로 객체클래스에 만들어 줘야"함
	
	//=============================================================//

	public void speedDown() {
		speed -= 10;
	}

	public String toString() {
		return "[속도:" + speed + ", 주행거리:" + mileage + ", 색상" + color + "]";
	}

} // Car 클래스(한 소스 코드에 클래스를 여러개 만들어도 자바는 컴파일 시 class를 개별적으로 하나의 class로 컴파일해서 문제없음)
	// bin폴더에서 확인 가능

//================================================================================//

public class Ex06_Constructor { // 이렇게 한 소스파일에 클래스 여러 개 일때, 클래스 파일과 main이 속한 클래스는 꼭 이름이 같아야함!
	// 생성자 테스트(생성자 오버로딩 하는 이유 : 다른 인스턴스를 만들어 여러 공간 생성 위해)
	public static void main(String[] args) {
		// 1) Default 생성자
		// 생성시에 단 한번 호출가능(new뒤에만 올 수 있기 때문에)=/=일반 메서드
		
		Car c1 = new Car(); // Car 클래스 인스턴스 생성, 생성자를 하나도 안 만들면 인스턴스 생성을 못하니까,
		// Car();은 default 생성자 : 기본적으로 매개변수 없는 생성자를 하나 생성해놓는것
		// 실행1. Car 클래스 안에 Car() {}(default 메서드) 가 먼저 얘로 인해 실행됨
		
		//=============================================================//
		
		c1.color = "white";
		c1.speed = 100;
		c1.mileage = 5000;
		//c1.Car(); Error -> undefined(재호출불가)

		System.out.println("** c1 : " + c1); // toString 생략
        // 실행2. Car 클래스 안에 다른 매서드 실행
		
		//=============================================================//
		
		Car c2=new Car(1000, 3000); //default생성자 아닌 다른 생성자 실행  //c1과는 번짓수 다름(새로운 인스턴스 호출)
		System.out.println("** c2 : " + c2);
		
		Car c3=new Car("Brown"); //default생성자 아닌 다른 생성자 실행 //c1,c2과는 번짓수 다름(새로운 인스턴스 호출)
		System.out.println("** c3 : " + c3);
		

		// 2) 생성자

	} // main

} // class
