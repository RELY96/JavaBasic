 package j05_ClassMethod;

public class Ex01_CarUser {

	// Car클래스의 사용자클래스(mainO) -> 멤버 변수, 멤버 메서드만 접근 가능 (메서드 안의 지역변수는 접근불가!)

	public static void main(String[] args) {
		// **객체(만들어 놓은 클래스)사용 ->
		// 1) new를 이용해 생성하기 => 객체화 한다 (myCar 첫 100번지 인스턴스 생성)
		Ex01_Car myCar = new Ex01_Car(); // myCar라고 변수명 지어서 객체 소환(=인스턴스) -> 해당 객체 안에 있는 멤버들을 사용할 수 있음
		myCar.color = "silver"; // main에서 color 바꾸기 가능
		// 단, 메서드 안에서 color는 blue이기 때문에 blue로 나옴(yellow가 silver로 바뀐거라서)
		myCar.mileage = 100000;
		// But, 메서드에 종속 된 지역변수인 price 등은 메인에서 접근 불가능함(인식도 못하고 쓸수도 없음)! 단 메서드 안에
		// price출력문이 있다면 출력은 됨

		myCar.speed = 200;
		myCar.speedUp(); // 멤버변수 speed부르고 200으로 초기화 후 speedUp 메서드 소환(호출) -> 200+10
		// 해당 메서드 안에 있는 price도 출력됨
		System.out.println("my Car toString1" + myCar.toString()); // toString 메서드는 스트링타입 리턴이니까 출력문에 넣어주기
		System.out.println("my Car toStringX" + myCar);
		// => 출력문에서 인스턴스명만 사용했을때? 자동 호출됨
		// => toString 메서드를 정의하지 않으면 인스턴스의 주소값을 제공함 : 인스턴스 변수는 참조형 변수

		// =============================================//

		// ** 클래스에 포함 가능한것(맴버)
		// => 속성(변수, 필드_Field, Column)/기능or동작(메서드)
		// => 맴버변수(전역변수)
		// => 맴버메서드 > 맴버메서드 종류 (역할이 정해져 있는 메서드들 (main, 생성자(Constructor), toString,
		// setter, getter))
		// 1) 생성자(Constructor)는 new 뒤에 오는 것
		// 2) toString main에서 메서드명 생략해도 toString으로 호출됨

		// --------------------------------------------//

		// ** 클래스명
		// => 대문자로 시작, 예약어 사용불가 , API 라이브러리의 클래스명 비추
		// => 클래스는 객체의 설계도

		// --------------------------------------------//

		// 객체화 한 거는 라이프사이클이 있음 -> 사용 끝나면 소멸
		// ** 객체의 주기 (LifeCycle) : 생성 -> 사용 -> 소멸(객체 주기의 실행 위치 : in Memory, RAM),가비지콜렉터로
		// 객체클래스 끝나면 자동 소멸됨s
		// -> 생성(클래스(in HDD) -> 생성(in Memory) -> 객체화 (인스턴스 생성))사용 사이
		// => 사용 -> 소멸(Memory 반납)(강제 소멸하는 법: myCar=null;(값없음))

		// --------------------------------------------//

		// ** 클래스, 객체, 인스턴스(instance : 사례,경우,유형)
		// 클래스와 인스턴스는 설계도와 제품이라고 할수있다.
		// 그럼 객체는 클래스일까 인스턴스일까?
		// Java 프로그래밍에서는 설계도인 클래스가
		// 메모리상의 구체적인 실체인 인스턴스가 되었을때 객체라고 부른다.

		// --------------------------------------------//

		// 보통은 구체적인 코드상에서 나타는 객체를 인스턴스라고 부르고,
		// 로직을 설계할때 나타나는 인스턴스를 객체라고 부른다.
		// 그러므로 클래스와 인스턴스는 구별되고, 클래스와 객체도 구별되지만,
		// "객체와 인스턴스는 구분없이 포괄적으로 객체라는 말을 쓰기도 한다"

		// --------------------------------------------//

		Ex01_Car fcar = myCar; // fcar는 new가 아니니까 myCar와 똑같은 주소, 똑같은 값을 가짐
		// myCar null해줘도 fcar가 myCar와 똑같은 주소를 갖고 있으니까, fcar는 이상 없이 출력됨(fcar는 fcar대로 똑같은
		// 값을 각각 가지고 있는셈)
		System.out.println("fcar : " + fcar);
		
		// --------------------------------------------//

		// ** 소멸 : 메모리청소
		// => 더이상 사용되지않는 값들은 자동제거해줌
		// => Garbage Collector (쓰레기수집기)
		// => 정해진 알고리즘에 의해 작동됨 ( 일정시간동안 또는 더이상 참조되지않는등등... )
		// => 참조형 변수에 null 값을 주면 소멸 (더이상 참조되지않음)
		// myCar=null;
		Ex01_Car uCar = new Ex01_Car(); // myCar,fcar 와 다른 주소, 다른 데이터값 가짐
		// 인스턴스(객체클래스)의 인스턴스를 생성함 -> 처음 객체클래스에 null줘서 값 초기화하고, 새 인스턴스 값을 출력할 수 있음
		// ** 인스턴스 변수(참조형변수)
		uCar.color = "Brown";
		uCar.speed = 300;
		uCar.mileage = 30000;
		System.out.println("uCar : " + uCar);

	} // main

} // class
