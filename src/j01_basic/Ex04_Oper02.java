package j01_basic;

public class Ex04_Oper02 {
	
//** bit 연산(박스안에 0,1 들이 있는데 박스를 이동하면서 연산하는 것)
//=> 쉬프트 연산(이동하는 연산) , 논리 연산 < ★암호화에 사용 >

	public static void main(String[] args) {
		int x=10; // 2진수 1010
		int y=3; // 2진수 0011
		
//		1) 쉬프트연산 : >> , << (한자리씩 이동! 맨 우측은 빠져나가고 빈 왼측은 0으로 초기화) -> ☆이진 쉬프트 연산은 암호화하는데 많이 쓰임(10진수처럼 결과를 예측할 수 없으니까)
		// 1-1) >> 우측으로 빠져나가면 버리고 맨 왼쪽 빈 공간은 0으로 초기화
		System.out.println("** x >> y => "+(x>>y)); // x를 우측으로 y만큼 이동 : 1010 -> 0101(첫번째이동) -> 0010(두번째이동) -> 0001 => 1
		System.out.println("** x => "+x); // x나 y의 값이 변한 건 아님		
		System.out.println("** x >> y => "+(x>>1)); //x를 우측으로 1번 이동 도 가능
		
		// 1-2) << 좌측으로 빠져나가면 1자리 승인, 올라감
		System.out.println("** x << y => "+(x<<y)); // x가 좌측으로 y만큼 이동 : 1010 -> 1 0100(*좌측으로 가는애는 1로 올라가니까 한단위 1 올라감) ->10 1000 -> 101 0000 => 80 
		System.out.println("** x << y => "+(x<<1)); // 20 x를 좌측으로 1번 이동 가능(1 0100)

		
//		 2) (이진수 간의) 논리연산
		// => AND &(1과 1이면 1, 아니면 0) , OR |(둘중에 하나가 1이면 1) , XOR ^(같으면 0, 둘이 다르면 1)
		// 2-1) 2-2) 2-3)
		System.out.println("** x & y => "+(x&y)); // 1010 (*세로 연산 비교함!)
		                                          // 0011
		                                          // 0010 => 10진수로 2
		System.out.println("** x | y => "+(x|y)); // 1011 => 11
		System.out.println("** x ^ y => "+(x^y)); // 1001 => 9
		
		
		
	} //main

} //class
